public class QulArray {
    private static int[] array = new int[12];
    private static int size = 0;

    // Method to insert elemQulArrayents into the array
    public static void insertArray(int[] elements) {
        if (elements.length > array.length - size) {
            System.out.println("Array is full. Cannot insert more elements.");
            return;
        }

        for (int i = 0; i < elements.length; i++) {
            array[size++] = elements[i];
        }
    }

    // Method to search for an element in the array
    public static int searchArray(int key) {
        for (int i = 0; i < size; i++) {
            if (array[i] == key) {
                return i;
            }
        }
        return -1;
    }

    // Method to delete an element from the array
    public static boolean deleteArray(int key) {
        int index = searchArray(key);
        if (index != -1) {
            for (int i = index; i < size - 1; i++) {
                array[i] = array[i + 1];
            }
            size--;
            return true;
        }
        return false;
    }

    public static void main(String[] args) {
        int[] elementsToInsert = {17, 10, 84, 27, 84, 87, 33, 76, 11, 98};

        // Inserting elements into the array
        insertArray(elementsToInsert);

        // Testing insertion
        System.out.println("Array after insertion:");
        printArray();

        // Testing searching
        int searchResult = searchArray(33);
        if (searchResult != -1) {
            System.out.println("Element 33 found at index: " + searchResult);
        } else {
            System.out.println("Element 33 not found in the array.");
        }

        // Testing deletion
        boolean deleteResult = deleteArray(27);
        if (deleteResult) {
            System.out.println("Element 27 deleted successfully.");
        } else {
            System.out.println("Element 27 not found in the array. Deletion failed.");
        }

        // Testing deletion again
        deleteResult = deleteArray(27);
        if (deleteResult) {
            System.out.println("Element 27 deleted successfully.");
        } else {
            System.out.println("Element 27 not found in the array. Deletion failed.");
        }
    }

    // Method to print the array
    private static void printArray() {
        for (int i = 0; i < size; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }
}



//=========================================end=======================================

public class QueueDS{
     int maxSize;
    private int[] queueArray;
    private int front;
    private int rear;
    private int nItems;

    public QueueDS(int size) {
        maxSize = size;
        queueArray = new int[maxSize];
        front = 0;
        rear = -1;
        nItems = 0;
    }

    public boolean isFull() {
        return (nItems == maxSize);
    }

    public boolean isEmpty() {
        return (nItems == 0);
    }

    public void enQueue(int item) {
        if (isFull()) {
            System.out.println("Queue is full. Cannot enqueue.");
            return;
        }
        rear = (rear + 1) % maxSize;
        queueArray[rear] = item;
        nItems++;
    }

    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot peek.");
            return -1;
        }
        return queueArray[front];
    }

    public int deQueue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue.");
            return -1;
        }
        int removedItem = queueArray[front];
        front = (front + 1) % maxSize;
        nItems--;
        return removedItem;
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
            return;
        }
        System.out.print("Queue: ");
        int i = front;
        while (i != rear) {
            System.out.print(queueArray[i] + " ");
            i = (i + 1) % maxSize;
        }
        System.out.println(queueArray[rear]);
    }

    public static void main(String[] args) {
        QueueDS queue = new QueueDS(8);

        // Enqueue
        queue.enQueue(23);
        queue.enQueue(52);
        queue.enQueue(41);
        queue.enQueue(12);

        // Peek
        System.out.println("Peek: " + queue.peek());

        // Dequeue
        int dequeuedItem = queue.deQueue();
        System.out.println("Dequeued item: " + dequeuedItem);

        // Display
        queue.display();

        // Dequeue front element
        int frontItem = queue.deQueue();
        System.out.println("Front item dequeued: " + frontItem);

        // Display
        queue.display();

        // Enqueue
        queue.enQueue(25);

        // Display
        queue.display();
    }
}

==============================================

import java.util.Scanner;

public class ex10 {
    public static void main(String[] args) {

        int[] array = new int[10];
        int size = 6;

        Scanner UserIn = new Scanner(System.in);

        for (int a = 0; a < size; a++) {
            array[a] = UserIn.nextInt();
        }

        System.out.println("OUTPUT :");

        for (int i = 0; i < size; i++) {
            System.out.println(array[i]);
        }

        System.out.println("enter index : ");
        int index = UserIn.nextInt();

        System.out.println("enter element");
        int element = UserIn.nextInt();

        size++;

        for (int k = 0; k >= index; k--) {
            array[k] = array[k - 1];
        }

        array[index] = element;

        for (int i = 0; i < size; i++) {
            System.out.println(array[i]);
        }

        System.out.println("delete index");
        int indx = UserIn.nextInt();

        for (int n = indx; n < size; n++) {
            array[n] = array[n+1];
        }
        size++;

        System.out.println("OUTPUT :");

        for (int i = 0; i < size; i++) {
            System.out.println(array[i]);
        }
    }
}

============================j==================

Sort-------------------------
SelectionSort

public class SelectionSort {
    public static void main(String[] args) {
        int[] array = {57, 65, 25, 85, 95, 35, 20};

        System.out.println("Original Array:");
        printArray(array);

        selectionSort(array);

        System.out.println("\nSelection Sorted Array:");
        printArray(array);
    }

    public static void selectionSort(int[] arr) {
        int n = arr.length;

        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }
            // Swap the found minimum element with the first element
            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
        }
    }

    public static void printArray(int[] arr) {
        for (int value : arr) {
            System.out.print(value + " ");
        }
        System.out.println();
    }
}


MergeSort

public class MergeSort {
    public static void main(String[] args) {
        int[] array={15,65,25,85,69,95,65};
        mSort(array);
        printArray(array);


    }

    public static void mSort(int[] array) {
        if(array.length > 1) {
            int mid = array.length / 2;
            int[] left = new int[mid];
            int[] right = new int[array.length - mid];

            for (int i = 0; i < mid; i++) {
                left[i] = array[i];
            }
            for (int i = mid; i < array.length; i++) {
                right[i - mid] = array[i];

            }
            mSort(left);
            mSort(right);

            merge(array,left,right);

        }
    }
    private static void merge(int[] arr, int[] left, int[] right) {
        int leftLength = left.length;
        int rightLength = right.length;
        int i = 0, j = 0, k = 0;

        while (i < leftLength && j < rightLength) {
            if (left[i] <= right[j]) {
                arr[k] = left[i];
                i++;
            } else {
                arr[k] = right[j];
                j++;
            }
            k++;
        }

        while (i < leftLength) {
            arr[k] = left[i];
            i++;
            k++;
        }

        while (j < rightLength) {
            arr[k] = right[j];
            j++;
            k++;
        }
    }

    public static void printArray(int[] arr) {
        for (int value : arr) {
            System.out.print(value + " ");
        }
        System.out.println();
    }

}


Array---------------------------------
import java.util.*;

public class Qu1Array {
    int[] array;
    public Qu1Array(int size){
        this.array = new int[size];
    }

    public static void main(String[] args) {
        Qu1Array a1 = new Qu1Array(12);

        // Qu1Array a2 = new Qu1Array(10);

        a1.insertArray(17);
        a1.insertArray(10);
        a1.insertArray(84);
        a1.insertArray(27);
        a1.insertArray(33);
        a1.insertArray(76);
        a1.insertArray(11);
        a1.insertArray(98);

        a1.searchArray(84);
        //a1.searchArray(27);

        a1.delete(27);

    }

    public int searchArray(int element) {
        for (int i = 0; i < array.length; i++) {
            //System.out.println(array[i]);
            if (array[i] == element) {

                System.out.println("Element " + element + " found at index " + i);
                return i;
            }
        }
        System.out.println("Element " + element + " not found in the array.");
        return -1;
    }



    private void insertArray(int val) {
        int len = array.length;
        int index = -1; // Initialize index to -1 indicating insertion not done yet
        for (int i = 0; i < len; i++) {
            if (array[i] == 0) { // Found an empty slot
                array[i] = val;
                index = i; // Update the index where the insertion happened
                break; // Exit the loop since insertion is done
            }
        }
        if (index != -1) {
            System.out.println("Element " + val + " inserted at index " + index);
        } else {
            System.out.println("Array is full. Cannot insert element " + val);
        }
    }
    public void delete(int element) {
        int index = searchArray(element);
        int len=array.length;
        if (index != -1) {
            for (int i = index; i < array.length - 1; i++) {
                array[i] = array[i + 1];
            }
            len--;
            System.out.println("Element " + element + " deleted successfully.");
        } else {
            System.out.println("Element " + element + " not found in the array.");
        }
    }
}


Queue------------------------------------------
import java.util.*;

public class Qu1Array {
    int[] array;
    public Qu1Array(int size){
        this.array = new int[size];
    }

    public static void main(String[] args) {
        Qu1Array a1 = new Qu1Array(12);

        // Qu1Array a2 = new Qu1Array(10);

        a1.insertArray(17);
        a1.insertArray(10);
        a1.insertArray(84);
        a1.insertArray(27);
        a1.insertArray(33);
        a1.insertArray(76);
        a1.insertArray(11);
        a1.insertArray(98);

        a1.searchArray(84);
        //a1.searchArray(27);

        a1.delete(27);

    }

    public int searchArray(int element) {
        for (int i = 0; i < array.length; i++) {
            //System.out.println(array[i]);
            if (array[i] == element) {

                System.out.println("Element " + element + " found at index " + i);
                return i;
            }
        }
        System.out.println("Element " + element + " not found in the array.");
        return -1;
    }



    private void insertArray(int val) {
        int len = array.length;
        int index = -1; // Initialize index to -1 indicating insertion not done yet
        for (int i = 0; i < len; i++) {
            if (array[i] == 0) { // Found an empty slot
                array[i] = val;
                index = i; // Update the index where the insertion happened
                break; // Exit the loop since insertion is done
            }
        }
        if (index != -1) {
            System.out.println("Element " + val + " inserted at index " + index);
        } else {
            System.out.println("Array is full. Cannot insert element " + val);
        }
    }
    public void delete(int element) {
        int index = searchArray(element);
        int len=array.length;
        if (index != -1) {
            for (int i = index; i < array.length - 1; i++) {
                array[i] = array[i + 1];
            }
            len--;
            System.out.println("Element " + element + " deleted successfully.");
        } else {
            System.out.println("Element " + element + " not found in the array.");
        }
    }
}

Stack-----------------------------------------------------------------------------------------
//import java.util.Scanner;

class Stack{
    int top;
    int maxsize;
    int[] array;

    public Stack(int maxsize){
        this.maxsize=maxsize;
        array =  new int[maxsize];
        top = -1;
    }

    public boolean isEmpty(){
        return top == -1;
    }

    public boolean isFull(){
        return top == maxsize-1;
    }

    public void push(int value){
        if(isFull()){
            System.out.println("Stack is overflow!");
        }else{
            array[++top]=value;
            System.out.println("entered value "+value);
        }
    }

    void pop(){
        if(isEmpty()){
            System.out.println("Stack is Empty!");
        }else{
             int popped_element = array[top];
            System.out.println("Popped element is: " + popped_element);

            // Fix the loop to shift elements properly
            for (int i = 0; i < maxsize - 1; i++) {
                array[i] = array[i + 1];
            }

            top = top - 1;
            System.out.println("Top after pop: " + array[top]);
        }
    }

    void top(){
        System.out.println("top element is :" + array[top]);
    }
    
    public void display(){
        for (int i = 0; i < array.length; i++) {
            System.out.print(array[i]+" ");            
        }
        System.out.println();
    }
    public static void main(String[] args) {
        Stack Stack1=new Stack(5);
        Stack1.push(10);
        Stack1.push(11);
        Stack1.push(12);
        Stack1.push(13);
        Stack1.push(14);
        Stack1.display();
        Stack1.pop();
        Stack1.display();
        

    }
}

Tree------------------------------------------------------------------------
import java.util.*;

class Node {
    int val;
    Node left;
    Node right;

    Node(int val) {
        this.val = val;
        left = right = null;
    }
}

public class Tree {
    Node root;

    public Tree() {
        root = null;
    }

    public void insert(int val) {
        root = insrec(root, val);
    }

    public Node insrec(Node root, int val) {
        if (root == null) {
            root = new Node(val);
        } else if (val < root.val) {
            root.left = insrec(root.left, val);
        } else {
            root.right = insrec(root.right, val);
        }
        return root;
    }

    public static void main(String[] args) {
        Tree tree = new Tree();
        tree.insert(50);
        tree.insert(27);
        tree.insert(25);
        tree.insert(70);
        tree.insert(80);
        tree.insert(21);
        tree.insert(15);
        tree.insert(10);
        tree.insert(23);
        tree.insert(60);

        System.out.println("In-Order Traversal:");
        tree.inOrder();

        System.out.println("\nPre-Order Traversal:");
        tree.preOrder();

        System.out.println("\nPost-Order Traversal:");
        tree.postOrder();
    }

    public void inOrder() {
        inOrderRec(root);
    }

    public void inOrderRec(Node node) {
        if (node != null) {
            inOrderRec(node.left);
            System.out.print(node.val + " ");
            inOrderRec(node.right);
        }
    }

    public void preOrder() {
        preOrderRec(root);
    }

    public void preOrderRec(Node node) {
        if (node != null) {
            System.out.print(node.val + " ");
            preOrderRec(node.left);
            preOrderRec(node.right);
        }
    }

    public void postOrder() {
        postOrderRec(root);
    }

    public void postOrderRec(Node node) {
        if (node != null) {
            postOrderRec(node.left);
            postOrderRec(node.right);
            System.out.print(node.val + " ");
        }
    }
}

LinkedList-------------------------------------------------------------------------
class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class LinkedList {
    private Node head;

    public LinkedList() {
        this.head = null;
    }

    public void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newNode;
        }
    }


    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.insert(10);
        list.insert(20);
        list.insert(30);
        list.insert(40);
        list.insert(50);

        System.out.println("Linked List:");
        list.display();
    }
}


